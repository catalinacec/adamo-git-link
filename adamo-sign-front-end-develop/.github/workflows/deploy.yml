name: 🚀 Deploy Static Site to S3 via SST

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: us-east-1
  SST_STAGE: ${{ github.ref_name == 'main' && 'production' || 'development' }}

jobs:
  deploy:
    name: 🌍 SST Deploy Job
    runs-on: ubuntu-latest

    steps:
      - name: 🕓 Record start time
        id: start-time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 🛠️ Create .env file
        run: |
          echo "NEXT_PUBLIC_CONVERTAPI_SECRET=${{ secrets.NEXT_PUBLIC_CONVERTAPI_SECRET }}" >> .env
          echo "NEXT_PUBLIC_ACCESSKEYID=${{ secrets.NEXT_PUBLIC_ACCESSKEYID }}" >> .env
          echo "NEXT_PUBLIC_SECRETACCESSKEY=${{ secrets.NEXT_PUBLIC_SECRETACCESSKEY }}" >> .env
          echo "NEXT_PUBLIC_REGION=${{ secrets.NEXT_PUBLIC_REGION }}" >> .env
          echo "NEXT_PUBLIC_BUCKETNAME=${{ secrets.NEXT_PUBLIC_BUCKETNAME }}" >> .env
          echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> .env
          echo "NEXT_PUBLIC_S3_BUCKETURL=${{ secrets.NEXT_PUBLIC_S3_BUCKETURL }}" >> .env

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔐 Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Deploy with SST
        run: npx sst deploy --stage $SST_STAGE

      - name: 📣 Notify Telegram on success
        if: success()
        run: |
          END_TIME=$(date +%s)
          START_TIME=${{ steps.start-time.outputs.timestamp }}
          DURATION=$(( END_TIME - START_TIME ))
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          MESSAGE="✅ *[Frontend] SST Deploy Successful*\n\n"
          MESSAGE+="🌐 *Stage:* \`${{ env.SST_STAGE }}\`\n"
          MESSAGE+="👤 *By:* \`${{ github.actor }}\`\n"
          MESSAGE+="📂 *Branch:* \`${{ github.ref_name }}\`\n"
          MESSAGE+="📝 *Commit:* [\`${SHORT_SHA}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
          MESSAGE+="💬 *Message:* _${{ github.event.head_commit.message }}_\n"
          MESSAGE+="⏱ *Started at:* \`${{ github.event.head_commit.timestamp }}\`\n"
          MESSAGE+="⌛ *Duration:* ${DURATION}s\n"
          MESSAGE+="🔗 [View GitHub Job](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"

      - name: ❌ Notify Telegram on failure
        if: failure()
        run: |
          END_TIME=$(date +%s)
          START_TIME=${{ steps.start-time.outputs.timestamp }}
          DURATION=$(( END_TIME - START_TIME ))
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          MESSAGE="🚨 *[Frontend] SST Deploy Failed*\n\n"
          MESSAGE+="🌐 *Stage:* \`${{ env.SST_STAGE }}\`\n"
          MESSAGE+="👤 *By:* \`${{ github.actor }}\`\n"
          MESSAGE+="📂 *Branch:* \`${{ github.ref_name }}\`\n"
          MESSAGE+="📝 *Commit:* [\`${SHORT_SHA}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
          MESSAGE+="💬 *Message:* _${{ github.event.head_commit.message }}_\n"
          MESSAGE+="⏱ *Started at:* \`${{ github.event.head_commit.timestamp }}\`\n"
          MESSAGE+="⌛ *Duration:* ${DURATION}s\n"
          MESSAGE+="❗ *Check the logs for details.*\n"
          MESSAGE+="🔗 [View GitHub Job](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"
