FROM node:20-alpine AS builder

WORKDIR /app

RUN apk add --no-cache zip

# 1) Instala deps y build
COPY package*.json ./
RUN npm ci

COPY . .

RUN npm run build:lambda

# âœ… Copiar locales y templates a rutas correctas
RUN mkdir -p dist/i18n templates && \
    cp -r src/i18n/locales dist/i18n/locales && \
    cp -R src/application/services/templates/* templates/

# 3) Prepara carpeta deploy (solo prod deps y artefactos)
RUN rm -rf deploy lambda.js \
  && mkdir -p deploy \
  && cp -r dist/* deploy/ \
  # ðŸ”¹ tambiÃ©n copia la carpeta de locales dentro de deploy
  && cp -r dist/i18n deploy/i18n \
  # ðŸ”¹ y las plantillas dentro de deploy
  && cp -r templates deploy/templates \
  && cp package.json deploy/ \
  && cd deploy && npm ci --omit=dev && cd ..

# 4) Aplana deploy a la raÃ­z para que todo quede en el ZIP en /
RUN rm -rf node_modules \
  && mv deploy/node_modules . \
  && mv deploy/package.json . \
  && mv deploy/lambda.js . \
  # ðŸ”¹ mueve tambiÃ©n las locales y plantillas al root
  && mv deploy/i18n ./i18n \
  && mv deploy/templates ./templates \
  && rm -rf deploy

# 5) Limpia archivos sobrantes de dev
RUN find node_modules -type f \( -name '*.md' -o -name '*.map' -o -name '*.test.js' \) -delete

# 6) Comprime con mÃ¡xima compresiÃ³n
RUN zip -r9 lambda.zip \
     lambda.js \
     package.json \
     node_modules \
     i18n \
     templates
